AWSTemplateFormatVersion: '2010-09-09'
Description: 'Tamplate for mentoring program'

Parameters:

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.micro]
  BucketName:
    Type: String
    Default: 'my-super-pupper-backet-1505'
  EnvironmentName:
    Type: String
    Default: "Nastia-Prod"

  MaxSizeASG:
    Description: "Enter the Max Size for the ASG"
    Type: String
    AllowedValues: [1, 2, 3]
    Default: "3"
  MinSizeASG:
    Description: "Enter the Min Size for the ASG"
    Type: String
    AllowedValues: [1, 2, 3]
    Default: "1"
  DesiredCapacityASG:
    Description: "Enter the desired capacity for the ASG"
    Type: String
    AllowedValues: [1, 2, 3]
    Default: "1"

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.30.0/24


  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.40.0/24

#Credentials for DB user
  DBName:
    Default: mydbname
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern : '[a-zA-Z][a-zA-Z0-9]*'
    Description : DB name
  DBUser :
    Default: admin
    NoEcho: true
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern : '[a-zA-Z][a-zA-Z0-9]*'
    Description : DB admin user
  DBPassword :
    Default: 12345678
    NoEcho: true
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern : '[a-zA-Z0-9]*'
    Description : DB admin password
  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 65536 GiB

Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0d5eff06f840b45e9

Resources:

# Create VPC, private and 2 public subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet1 (AZ1)



  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet2 (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet2 (AZ1)



  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1


  NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2



  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet1RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2



  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2


  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC


  # Create the bucket to contain the website HTML
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        ErrorDocument: 'index.html'
        IndexDocument: 'index.html'

  # Configure the bucket as a CloudFront Origin
  ReadPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Principal: '*'
            # In an ideal scenario the policy would only grant these rights to CloudFront,
            # we do not do it from scratch as many projects start without having a domain name specified
            # and we want to test the code as soon as possible.
            # Principal: CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  # Configure Access to CloudFront
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket

  # Configure CloudFront
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403 # not found
            ResponseCode: 404
            ResponsePagePath: '/index.html'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 86400 # in seconds
          MinTTL: 60 # in seconds
          TargetOriginId: s3origin
          ViewerProtocolPolicy: 'allow-all'
        # This DefaultRootObject configuration is not enough.
        DefaultRootObject: '/index.html'
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt 'S3Bucket.DomainName'
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'

  # Create an IAM user with Access Keys to enable automated deployment of the website to this bucket
  PublishUser:
    Type: 'AWS::IAM::User'
    Properties:
      Policies:
        - PolicyName: !Sub 'publish-to-${S3Bucket}'
          PolicyDocument:
            Statement:
              - Action: 's3:*'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'

  PublishCredentials:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref PublishUser

  # Security Groups

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "my-magic-sg"
      GroupDescription: "Allow 80 and 22 to client host"
      VpcId:
         Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - PrivateSubnet1
    - PrivateSubnet2
    Properties:
      GroupName: "rds-sg"
      GroupDescription: "Allow 3306 to client host"
      VpcId:
         Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0

# Auto Scaling Group

  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !FindInMap [ AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64 ]
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref MySecurityGroup
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe

            yum update -y
            yum install -y httpd
            echo "Welcome from the instance $(hostname -f)" > /var/www/html/index.html
            service httpd start
            cd ~
            mkdir -p .aws
            cd .aws
            echo '[default]' > config
            echo 'region = us-east-1' >> config
            echo '[default]' > credentials
            echo 'aws_access_key_id = ${PublishCredentials}' >> credentials
            echo 'aws_secret_access_key = ${PublishCredentials.SecretAccessKey}' >> credentials
            cd ~
            aws s3 ls ${S3Bucket} > test.txt
            wget https://raw.githubusercontent.com/nastyabelka/my_magic_repo/master/test.sh
            chmod +x test.sh
            wget https://github.com/nastyabelka/my_magic_repo/raw/master/cloudfrontsite.tar.gz
            tar -zxf cloudfrontsite.tar.gz
            ./test.sh
            cd cloudfront_site
            aws s3 cp ./ s3://${S3Bucket} --recursive --acl public-read

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      CrossZone: 'true'
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
        - !Ref MySecurityGroup

  ApplicationAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
        - LoadBalancer
    Properties:
      AutoScalingGroupName: My-magic-asg
      MinSize: !Ref MinSizeASG
      MaxSize: !Ref MaxSizeASG
      DesiredCapacity: !Ref DesiredCapacityASG
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerNames:
        - !Ref LoadBalancer

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ApplicationAsg
      Cooldown: '60'
      ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ApplicationAsg
      Cooldown: '60'
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 70
      AlarmDescription: Go in Alarm is memory is higher than 70% for 60 seconds
      Period: 60
      AlarmActions:
      - Ref: ScaleUpPolicy
      Namespace: ASG
      Dimensions:
      - Name: ApplicationAsg
        Value: !Ref ApplicationAsg
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 30
      AlarmDescription: Go in Alarm is memory is lower than 30% for 60 seconds
      Period: 60
      AlarmActions:
      - Ref: ScaleDownPolicy
      Namespace: ASG
      Dimensions:
      - Name: ApplicationAsg
        Value: !Ref ApplicationAsg
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

# Route 53
  HostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: 'My hosted zone for myoriginaldomanename.site'
      Name: 'myoriginaldomanename.site'

  DNSRecord1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !GetAtt HostedZone.Id
      Name: www.myoriginaldomanename.site
      ResourceRecords:
      - myoriginaldomanename.site
      TTL: 300
      Type: CNAME

  DNSRecordCloudFront:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
        - Name: myoriginaldomanename.site
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneNameID'
            DNSName: !GetAtt 'LoadBalancer.DNSName'

# RDS

  myDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn:
    - PrivateSubnet1RouteTableAssociation
    - PrivateSubnet1
    - PrivateSubnet2
    - PrivateSubnet2RouteTableAssociation
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup for my DBinstance
      SubnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
  DBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
    - myDBSubnetGroup
    Properties:
      DBName:
        Ref: DBName
      Engine: mariadb
      MasterUsername:
        Ref: DBUser
      DBInstanceClass: db.t2.micro
      AllocatedStorage:
        Ref: DBAllocatedStorage
      MasterUserPassword:
        Ref: DBPassword
      VPCSecurityGroups:
      - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName:
        Ref: myDBSubnetGroup
  ReadReplicaDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: read-DBInstance
      SourceDBInstanceIdentifier: !Ref DBInstance
Outputs:

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets1:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1 ]]

  PublicSubnets2:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1


  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1


  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
  Bucket:
    Description: 'S3 Bucket Name'
    Value: !Ref S3Bucket
  BucketUrl:
    Description: 'S3 Bucket Url'
    Value: !GetAtt 'S3Bucket.WebsiteURL'
  DistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
  Domain:
    Description: 'Cloudfront Domain'
    Value: !GetAtt CloudFrontDistribution.DomainName

  DNSNameLoadBalancer:
    Value: !GetAtt LoadBalancer.DNSName
    Description: DNSName of the loadbalancer